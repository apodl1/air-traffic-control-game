  /*private val initalTarget: Coord =
    if runway.direction == CompassDir.East || runway.direction == CompassDir.West then
      if plane.location.x < entryPoint.x && plane.location then
        (entryPoint.toGridPos(coordPerTile) - runway.direction - runway.direction - GridPos(0, 2)).toCoord(coordPerTile)
      else
        (entryPoint.toGridPos(coordPerTile) - runway.direction - runway.direction + GridPos(0, 2)).toCoord(coordPerTile)
    else
      if plane.location.x < runwayStart.x * coordPerTile then
        (entryPoint.toGridPos(coordPerTile) - runway.direction - runway.direction - GridPos(2, 0)).toCoord(coordPerTile)
      else
        (entryPoint.toGridPos(coordPerTile) - runway.direction - runway.direction + GridPos(2, 0)).toCoord(coordPerTile) then
      oriented = true
      entryPoint
    else
      orientationPoint*/
      
    /*if bearingToTargetDiff > 0 && bearingToTargetDiff < 180 then
      plane.bearing += toTurn
    else
    if bearingToTargetDiff <= 180 && plane.location.bearingTo(target) < plane.bearing.value then
      plane.bearing -= toTurn
    else if bearingToTargetDiff <= 180 && plane.location.bearingTo(target) > plane.bearing.value then
      plane.bearing += toTurn
    else if bearingToTargetDiff > 180 && plane.location.bearingTo(target) > plane.bearing.value then
      plane.bearing -= toTurn
    else if bearingToTargetDiff > 180 && plane.location.bearingTo(target) < plane.bearing.value then
      plane.bearing += toTurn */
      
      
  /*
  var boundary       = Buffer.fill[Option[Char]](8)(None)
  var plausibleTiles =
    if loc.x < gridBufferSize || loc.x > grid.width - 1 - gridBufferSize || loc.y < gridBufferSize || loc.y > grid.height - 1 - gridBufferSize then
      ArrayBuffer("00000000")
    else
      ArrayBuffer[String]() ++ AllTiles.allStrings

  
  def entropy = plausibleTiles.size
  
  def fix(placeOnBoundary: Int, value: Char): Unit =
    if boundary(placeOnBoundary).isEmpty then
      boundary(placeOnBoundary) = Some(value)
      plausibleTiles = plausibleTiles.filter( _.charAt(placeOnBoundary) == value )
      propagateChange(placeOnBoundary, value)

  def collapse(): Unit =
    val chosenTile = plausibleTiles(Random.nextInt(plausibleTiles.size))
    tile = Some(chosenTile)
    if chosenTile.count( _ == '1' ) == 1 then
      if otherEndOfRunway(loc).isDefined then
        var edge1 = loc
        var edge2 = otherEndOfRunway(loc).get
        if Random.nextInt(1) == 0 then
          edge1 = otherEndOfRunway(loc).get
          edge2 = loc
        grid.runways.append(Runway(grid.numberOfRunways, edge1, edge2))
      else
        grid.numberOfRunways += 1
      var nextLoc = loc - directionOfRunway(loc)
      while nextLoc.x >= gridBufferSize && nextLoc.x < grid.width - gridBufferSize && nextLoc.y >= gridBufferSize && nextLoc.y < grid.height - gridBufferSize do
        grid.squareAt(nextLoc).excludeRunwaysWithDirection(directionOfRunway(loc))
        nextLoc -= directionOfRunway(loc)
    boundary = chosenTile.toBuffer.map( n => Some(n) )
    boundary.flatten.zipWithIndex.foreach( (n, m) => propagateChange(m, n) )
  
  
  def propagateChange(boundaryIndex: Int, fixedValue: Char): Unit =
    neighborBoundaries.filter( _.mine == boundaryIndex )
      .foreach( n => loc.neighborOption(n.dir, (grid.size))
        .foreach( m => grid.squareAt(m).fix(n.theirs, fixedValue)) )
    if tile.getOrElse("0").contains('1') then
      grid.squareAt(loc + GridPos(directionOfRunway(loc).yStep, directionOfRunway(loc).xStep)).excludeRunways()
      grid.squareAt(loc - GridPos(directionOfRunway(loc).yStep, directionOfRunway(loc).xStep)).excludeRunways()

  def otherEndOfRunway(gridPos: GridPos): Option[GridPos] = //can be called only with edge of runway
    assert(grid.squareAt(gridPos).tile.getOrElse("0").count( _ == '1') == 1)
    val neighborsWithRunway = gridPos.neighbors(grid.size).filter( n => grid.squareAt(n).tile.getOrElse("0").contains('1') )
    if neighborsWithRunway.isEmpty then return None
    val neighborWithRunway = neighborsWithRunway.head
    val direction = loc - neighborWithRunway
    var currentLoc = neighborWithRunway
    while grid.squareAt(currentLoc).tile.getOrElse("0").count(_ == '1') == 2 do
      currentLoc = currentLoc - direction
    if grid.squareAt(currentLoc).tile.getOrElse("0").count(_ == '1') == 0 then
      None
    else
      Some(currentLoc)

  def directionOfRunway(gridPos: GridPos): CompassDir =
    assert(grid.squareAt(gridPos).tile.getOrElse("0").count(_ == '1') > 0)
    grid.squareAt(gridPos).tile.getOrElse("0")
      .toCharArray
      .zipWithIndex
      .filter(_._1 == '1')
      .map(n => neighborBoundaries.filter(_.mine == n._2).head.dir)
      .head

  def excludeRunways() =
    plausibleTiles = plausibleTiles.filter( m => !m.contains('1') )

  def excludeRunwaysWithDirection(direction: CompassDir) =
    if direction == East || direction == CompassDir.West then
      plausibleTiles = plausibleTiles.filter( n => n(3) != '1' && n(7) != '1' )
    else
      plausibleTiles = plausibleTiles.filter( n => n(1) != '1' && n(5) != '1' )

  def includeOnlyRunwaysWithDirection(direction: CompassDir) =
    if direction == East || direction == CompassDir.West then
      fix(3, '1')
      fix(7, '1')
    else
      fix(1, '1')
      fix(5, '1') */
      
      
      
package airplaneGame

import scala.math

class test(var coord: (Int, Int)):
  var vel = math.Pi / 4
  var dir = 0.0
  var speed = 100

  def move() =
    coord = (coord._1 + (math.sin(dir) * speed).toInt, coord._2 + (math.cos(dir) * speed).toInt)

  def turn() =
    dir = dir + vel



@main def a() =
  val a = test((0, 0))
  a.move()
  a.turn()
  a.move()
  println(a.coord)
  println(a.dir)


package airplaneGame

import java.awt.Image
import java.io.File
import javax.imageio.ImageIO
import javax.swing.ImageIcon

object AllTiles: //depreceated

  def readScaledImage(filename: String): ImageIcon =
    ImageIcon(ImageIO.read(File("./Tiles/" + filename)).getScaledInstance(AirplaneGame.coordPerGridPos, AirplaneGame.coordPerGridPos, Image.SCALE_DEFAULT))

  val filenames = File("./Tiles").list

  def stripEnding(s: String) = s.takeWhile(_ != '.')

  lazy val allStrings    = filenames.map(stripEnding(_))
  lazy val images        = filenames.map(name => (stripEnding(name), readScaledImage(name))).toMap


  def neighborOption(direction: CompassDir, gridSize: (Int, Int)): Option[GridPos] =
    val neighborPos = GridPos(x + direction.xStep, y + direction.yStep)
    if neighborPos.x > (gridSize._1 - 1) || neighborPos.x < 0 || neighborPos.y > (gridSize._2 - 1) || neighborPos.y < 0
      then None
    else
      Some(neighborPos)

  def neighbors(gridSize: (Int, Int)): Array[GridPos] =
    val res = Buffer.empty[Option[GridPos]]
    res.append(neighborOption(CompassDir.North, gridSize))
    res.append(neighborOption(CompassDir.East, gridSize))
    res.append(neighborOption(CompassDir.South, gridSize))
    res.append(neighborOption(CompassDir.West, gridSize))
    res.flatten.toArray

package airplaneGame

import scala.io.StdIn.readInt

/* @main def generationTest() =
  val world = Grid(15, 15)
  var collapsed = 0
  while world.currentGrid.flatten.map( _.tile ).contains( None ) do
    world.collapseOne()
    collapsed += 1
  val printable = world.currentGrid.map( _.map( n => AllTiles.ascii(n.tile.getOrElse("nothing")) ) )

  printable.foreach( n => println(n.mkString(",")) )
  println(collapsed)
  println(world.numberOfRunways)
  println(world.runways.length)


*/


@main def generationTest() =
  val game = GameState(15, 15, 3, 60)
  val world = game.grid
  world.generate(4, (3, 3), Vector(3, 4))

  val printable = world.currentGrid.map( _.map( n => n.tile.getOrElse("********") ) )

  printable.foreach( n => println(n.mkString(",")) )
  world.runways.foreach( n => println(s"Start: ${n.start}, end: ${n.end}, ${n.direction}") )

  (1 to 20).foreach( n => game.tick() )
  (1 to 150).foreach( n => game.tick() )


  def renderable: Vector[String] =
    currentGrid.flatten.map( n => n.tile.getOrElse("grounddd") )


  def collapseOne() =
    val best  = currentGrid.flatten
      .filter(_.tile.isEmpty)
      .minByOption(_.entropy)

    best.foreach( _.collapse() )

case class Neighbor(mine: Int, dir: CompassDir, theirs: Int)

val neighborBoundaries = Vector(
    Neighbor(0, West,  2),
    Neighbor(0, North, 6),
    Neighbor(1, North, 5),
    Neighbor(2, North, 4),
    Neighbor(2, East,  0),
    Neighbor(3, East,  7),
    Neighbor(4, East,  6),
    Neighbor(4, South, 2),
    Neighbor(5, South, 1),
    Neighbor(6, South, 0),
    Neighbor(6, West,  4),
    Neighbor(7, West,  3),
)
*/


  //game.grid.runways.foreach( n => println(n.start) )
  //game.grid.currentGrid.flatten.filter( _.tile.contains("S"

  /*val drawableGrid = new GridPanel(gridSizeX, gridSizeY):
    game.grid.renderable
      .map( tile => new Label{icon = AllTiles.images(tile)} )
      .foreach( contents += _ )*/
      
      
  /*var textPanel = new BoxPanel(Orientation.Vertical):
    preferredSize = new Dimension(100, gridSizeY * coordPerGridPos)
    contents += new Label("Location: ")
    contents += new Label("Bearing: ")
    contents += new Label("Speed: ")
    contents += new Label("Fuel: ")
    contents += new Label("Origin: ")
    contents += new Label("Action: ")

  def updateTextPanel(planeToDisplay: Option[Airplane]): Unit =
    textPanel = new BoxPanel(Orientation.Vertical):
      preferredSize = new Dimension(100, gridSizeY * coordPerGridPos)
    if planeToDisplay.isDefined then
      println("updated")
      val plane = planeToDisplay.get
      textPanel.contents += new Label("Location: " + plane.location)
      textPanel.contents += new Label("Bearing: " + plane.bearing)
      textPanel.contents += new Label("Speed: " + plane.speed)
      textPanel.contents += new Label("Fuel: " + plane.fuel)
      textPanel.contents += new Label("Origin: " + plane.origin)
      textPanel.contents += new Label("Needed runway: " + plane.neededRunway)
      textPanel.contents += new Label("Action: " + plane.action)*/